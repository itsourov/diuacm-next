generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  title             String          @db.VarChar(255)
  description       String?         @db.VarChar(255)
  status            EventStatus     @default(draft)
  startingAt        DateTime        @map("starting_at")
  endingAt          DateTime        @map("ending_at")
  eventLink         String?         @unique @map("event_link") @db.VarChar(255)
  eventPassword     String?         @map("event_password") @db.VarChar(255)
  openForAttendance Boolean         @map("open_for_attendance")
  strictAttendance  Boolean         @default(false) @map("strict_attendance")
  type              EventType       @default(contest)
  attendanceScope   AttendanceScope @default(open_for_all) @map("attendance_scope")
  createdAt         DateTime?       @map("created_at")
  updatedAt         DateTime?       @map("updated_at")

  // Relations
  eventRankLists EventRankList[]
  eventUsers     EventUser[]
  solveStats     SolveStat[]

  @@map("events")
}

model Tracker {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String    @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String    @db.VarChar(255)
  status      Status    @default(draft)
  createdAt   DateTime? @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  // Relation to RankList
  rankLists RankList[]

  @@map("trackers")
}

model RankList {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  trackerId       BigInt    @map("tracker_id") @db.UnsignedBigInt
  title           String    @db.VarChar(255)
  session         String    @db.VarChar(255)
  description     String?   @db.VarChar(255)
  weightOfUpsolve Float     @default(0.25) @map("weight_of_upsolve")
  isArchived      Boolean   @default(false) @map("is_archived")
  createdAt       DateTime? @map("created_at")
  updatedAt       DateTime? @map("updated_at")

  // Relations
  tracker        Tracker         @relation(fields: [trackerId], references: [id])
  eventRankLists EventRankList[]
  rankListUsers  RankListUser[]

  @@map("rank_lists")
}

model EventRankList {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  eventId    BigInt    @map("event_id") @db.UnsignedBigInt
  rankListId BigInt    @map("rank_list_id") @db.UnsignedBigInt
  weight     Float     @default(1)
  createdAt  DateTime? @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  rankList RankList @relation(fields: [rankListId], references: [id], onDelete: Cascade)

  @@map("event_rank_list")
}

model EventUser {
  id        BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  userId    String    @map("user_id")
  eventId   BigInt    @map("event_id") @db.UnsignedBigInt
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_user")
}

model RankListUser {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  userId     String    @map("user_id")
  rankListId BigInt    @map("rank_list_id") @db.UnsignedBigInt
  score      Float     @default(0)
  createdAt  DateTime? @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rankList RankList @relation(fields: [rankListId], references: [id], onDelete: Cascade)

  @@unique([userId, rankListId])
  @@map("rank_list_user")
}

model SolveStat {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  userId       String    @map("user_id")
  eventId      BigInt    @map("event_id") @db.UnsignedBigInt
  solveCount   BigInt    @map("solve_count") @db.UnsignedBigInt
  upsolveCount BigInt    @map("upsolve_count") @db.UnsignedBigInt
  isPresent    Boolean   @default(false) @map("is_present")
  createdAt    DateTime? @map("created_at")
  updatedAt    DateTime? @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("solve_stats")
}

model User {
  id               String    @id @default(cuid())
  name             String    @db.VarChar(255)
  email            String    @unique @db.VarChar(255)
  username         String    @unique @db.VarChar(255)
  emailVerified    DateTime? @map("email_verified_at")
  image            String?
  password         String?   @db.VarChar(255)
  gender           Gender    @default(unspecified)
  phone            String?   @db.VarChar(255)
  codeforcesHandle String?   @map("codeforces_handle") @db.VarChar(255)
  atcoderHandle    String?   @map("atcoder_handle") @db.VarChar(255)
  vjudgeHandle     String?   @map("vjudge_handle") @db.VarChar(255)
  startingSemester String?   @map("starting_semester") @db.VarChar(255)
  department       String?   @db.VarChar(255)
  studentId        String?   @map("student_id") @db.VarChar(255)
  maxCfRating      Int?      @map("max_cf_rating") @db.UnsignedInt
  rememberToken    String?   @map("remember_token") @db.VarChar(100)
  createdAt        DateTime? @map("created_at")
  updatedAt        DateTime? @map("updated_at")

  eventUsers    EventUser[]
  rankListUsers RankListUser[]
  solveStats    SolveStat[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions_next")
}

model VerificationToken {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum EventStatus {
  published
  draft
  private
}

enum EventType {
  contest
  class
  other
}

enum AttendanceScope {
  open_for_all       @map("open_for_all")
  only_girls         @map("only_girls")
  junior_programmers @map("junior_programmers")
  selected_persons   @map("selected_persons")
}

enum Gender {
  male
  female
  other
  unspecified
}

enum Status {
  published
  draft
  private
}

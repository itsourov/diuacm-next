datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with new fields
model User {
  id               String              @id @default(cuid())
  name             String
  email            String              @unique
  username         String              @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  password         String?
  gender           String?
  phone            String?
  // New fields for coding platforms
  codeforcesHandle String?
  atcoderHandle    String?
  vjudgeHandle     String?
  // New fields for university information
  startingSemester String?
  department       String?
  studentId        String?
  // Existing relations
  ranklists        UsersOnRanklists[]
  contestStats     ContestStatOfUser[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@map("users")
}

// Rest of the models remain the same
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum EventStatus {
  DRAFT
  PUBLISHED
  PRIVATE
}

enum EventType {
  CLASS
  CONTEST
  MEETING
}

model Event {
  id                String              @id @default(cuid())
  title             String
  description       String?
  status            EventStatus         @default(DRAFT)
  startDateTime     DateTime
  endDateTime       DateTime
  contestLink       String?
  contestPassword   String?
  openForAttendance Boolean             @default(false)
  type              EventType
  weight            Float               @default(1.0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ranklists         EventsOnRanklists[]
  contestStats      ContestStatOfUser[]
  attendanceScope   AttendanceScope     @default(PUBLIC)
}

enum AttendanceScope {
  PUBLIC
  ONLY_GIRLS
  JUNIOR_PROGRAMMERS
}

model Tracker {
  id          String                @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  ranklists   TrackersOnRanklists[]
}

model Ranklist {
  id        String                @id @default(cuid())
  title     String
  keyword   String                @unique
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  users     UsersOnRanklists[]
  events    EventsOnRanklists[]
  trackers  TrackersOnRanklists[]
}

model TrackersOnRanklists {
  tracker    Tracker  @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  trackerId  String
  ranklist   Ranklist @relation(fields: [ranklistId], references: [id], onDelete: Cascade)
  ranklistId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([trackerId, ranklistId])
}

model UsersOnRanklists {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  ranklist   Ranklist @relation(fields: [ranklistId], references: [id], onDelete: Cascade)
  ranklistId String
  score      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, ranklistId])
}

model EventsOnRanklists {
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  ranklist   Ranklist @relation(fields: [ranklistId], references: [id], onDelete: Cascade)
  ranklistId String
  weight     Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([eventId, ranklistId])
}

model ContestStatOfUser {
  id           String   @id @default(uuid())
  userId       String
  eventId      String
  solveCount   Int
  upsolveCount Int
  isAbsent     Boolean
  note         String?
  lastUpdated  DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  key       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gallery   Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  galleryId String
}

model BlogPost {
  id            String         @id @default(cuid())
  title         String
  content       String
  author        String
  status        BlogPostStatus @default(DRAFT)
  publishedAt   DateTime?
  featuredImage String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  PRIVATE
}
